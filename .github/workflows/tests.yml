name: Tests

on:
  push:
    branches: [ main, master, dev, re-org ]
  pull_request:
    branches: [ main, master, dev, re-org ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov python-dotenv requests pyyaml

    - name: Run memory server tests (fast)
      run: pytest tests/test_memory_server.py -v
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Run memory integration tests (with server)
      run: pytest tests/test_memory_integration.py -v -m integration
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      continue-on-error: true

    - name: Generate coverage (Ubuntu + Python 3.12 only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      run: pytest tests/test_memory_server.py --cov=mirix --cov-report=html --cov-report=term
      continue-on-error: true

    - name: Upload coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
      continue-on-error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12' 

    - name: Install ruff
      run: pip install ruff

    - name: Run ruff on mirix package
      run: ruff check mirix/
      continue-on-error: true
    
    - name: Run ruff on tests
      run: ruff check tests/
      continue-on-error: true

